// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace musicapp.Models
{
    public partial class music1Context : DbContext
    {
        public music1Context()
        {
        }

        public music1Context(DbContextOptions<music1Context> options)
            : base(options)
        {
        }

        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<Feedback1> Feedback1s { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Music> Musics { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Voting> Votings { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=SHRKRI-39-05-22;Initial Catalog=music2;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BankAccount>(entity =>
            {
                entity.ToTable("bank_account");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Balance)
                    .HasColumnType("money")
                    .HasColumnName("balance");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.Email)
                    .HasConstraintName("FK__bank_acco__email__60A75C0F");
            });

            modelBuilder.Entity<Feedback1>(entity =>
            {
                entity.HasKey(e => e.Feedid)
                    .HasName("PK__feedback__A0A4E9673082E8F5");

                entity.ToTable("feedback1");

                entity.Property(e => e.Feedid).HasColumnName("feedid");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Feedback)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("feedback");

                entity.Property(e => e.Songname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("songname");

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.Feedback1s)
                    .HasForeignKey(d => d.Email)
                    .HasConstraintName("FK__feedback1__email__2B3F6F97");
            });

            modelBuilder.Entity<Genre>(entity =>
            {
                entity.HasKey(e => e.Genrename)
                    .HasName("PK__genre__84FB350A282F93DC");

                entity.ToTable("genre");

                entity.Property(e => e.Genrename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("genrename");

                entity.Property(e => e.Genreid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("genreid");
            });

            modelBuilder.Entity<Music>(entity =>
            {
                entity.ToTable("music");

                entity.Property(e => e.MusicId)
                    .ValueGeneratedNever()
                    .HasColumnName("music_id");

                entity.Property(e => e.Genreid).HasColumnName("genreid");

                entity.Property(e => e.Genrename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("genrename");

                entity.Property(e => e.ImgPath)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("img_path");

                entity.Property(e => e.MusicName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("music_name");

                entity.Property(e => e.MusicPath)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("music_path");

                entity.HasOne(d => d.GenrenameNavigation)
                    .WithMany(p => p.Musics)
                    .HasForeignKey(d => d.Genrename)
                    .HasConstraintName("FK__music__genrename__286302EC");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.ToTable("payment");

                entity.Property(e => e.Paymentid).HasColumnName("paymentid");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Paymentamt)
                    .HasColumnType("money")
                    .HasColumnName("paymentamt");

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.Email)
                    .HasConstraintName("FK__payment__email__4F7CD00D");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Email)
                    .HasName("PK__users__AB6E6165B2A81618");

                entity.ToTable("users");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Dob)
                    .HasColumnType("date")
                    .HasColumnName("dob");

                entity.Property(e => e.MusicPlan)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("music_plan");

                entity.Property(e => e.Password)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.Phone)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Role)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("role")
                    .HasDefaultValueSql("('User')");

                entity.Property(e => e.Roles)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("roles")
                    .HasDefaultValueSql("('User')");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Voting>(entity =>
            {
                entity.HasKey(e => e.Voteid)
                    .HasName("PK__voting__78F58A7B633ACFE9");

                entity.ToTable("voting");

                entity.Property(e => e.Voteid)
                    .ValueGeneratedNever()
                    .HasColumnName("voteid");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Songid).HasColumnName("songid");

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.Votings)
                    .HasForeignKey(d => d.Email)
                    .HasConstraintName("FK__voting__email__2F10007B");

                entity.HasOne(d => d.Song)
                    .WithMany(p => p.Votings)
                    .HasForeignKey(d => d.Songid)
                    .HasConstraintName("FK__voting__songid__2E1BDC42");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}